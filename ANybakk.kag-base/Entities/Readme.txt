Each entity can be associated with several scripts, through declarations in their data file. In kag-base, each of these scripts are named on the form "<EntityName>Blob.as", "<EntityName>Sprite.as", and so on. These will be referred to as "interface files", and contain functions that are called by the game engine in various situations. The functions are "global" in the script file scope for all entities of the same type. In additions to these, are files with the same name as the entity, on the form "<EntityName>.as". These will be referred to as "entity files", and contain functions, types and other custom code.

Entities in kag-base, are designed in a special way. In vanilla KAG, there are a lot of different scripts that are combined in several ways, but primarily by behavior. In kag-base, they are per-entity. At the same time, it is encouraged to let entities "inherit" behaviour. For example, a "SpawnSite", which is a special building where players spawn and store items, is also a "Building" (and a more generic "Entity"). Each entity can have a set of data variables associated with them. For instance, the Building entity has a "BACKWALL_TYPE" variable that determines what kind of back wall is built behind a building. For a SpawnSite, being a "sub-type" of Building, it will probably also be relevant to set a back wall type, but not necessarily, and perhaps not the default wooden background. Therefore, in kag-base there are established practices for a sort of inheritence where data variables can be overridden. This also allows server owners and other modders to tweak the behavior fairly easily.

To create new entities, it is recommended to do the following. Create a new mod by creating a new folder under "<kag-install-directory>\Mods". Then, make copies of the files on the form "ExampleEntity*.as" in "<kag-base>\Entities". Paste them into the newly created mod directory, in a folder structure you see fit. It is recommended, but not required, to mimic the folder structure used in kag-base. The files contains the basics to get you started. Note that if you want to override data values, do so in a onInit function in the relevant Blob interface file.

To simply tweak data values, create a mod as described above. Then locate the relevant Blob interface file, and copy it, with the folder structure, into the mod folder. Edit the file and set the desired values in the onInit function. To see what values are available for modification, locate the referred file, looking at the reference path. For example, "Building::Data" tells you to find "Building.as" and the class "Data" within that file. To change the building's back wall type to stone, add a line in the interface file: "data.BACKWALL_TYPE = CMap::tile_castle_back;".